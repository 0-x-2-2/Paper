From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MiniDigger | Martin <admin@minidigger.dev>
Date: Wed, 29 Apr 2020 02:10:32 +0200
Subject: [PATCH] Allow delegation to vanilla chunk gen


diff --git a/src/main/java/net/minecraft/server/ChunkConverter.java b/src/main/java/net/minecraft/server/ChunkConverter.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/server/ChunkConverter.java
+++ b/src/main/java/net/minecraft/server/ChunkConverter.java
@@ -0,0 +0,0 @@ import org.apache.logging.log4j.Logger;
 public class ChunkConverter {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final ChunkConverter a = new ChunkConverter();
+    public static final ChunkConverter a = new ChunkConverter(); public static ChunkConverter getEmptyConverter() { return a; } // Paper - obfhelper
     private static final EnumDirection8[] c = EnumDirection8.values();
     private final EnumSet<EnumDirection8> d;
     private final int[][] e;
@@ -0,0 +0,0 @@ public class ChunkConverter {
                         if ((Integer) iblockdata.get(BlockProperties.an) >= j) {
                             generatoraccess.setTypeAndData(blockposition, (IBlockData) iblockdata.set(BlockProperties.an, j), 18);
                             if (i != 7) {
-                                EnumDirection[] aenumdirection = null.f;
+                                EnumDirection[] aenumdirection = f; // Paper - decomp fix
                                 int k = aenumdirection.length;
 
                                 for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -0,0 +0,0 @@ public final class CraftServer implements Server {
         return new CraftChunkData(world);
     }
 
+    // Paper start
+    @Override
+    public ChunkGenerator.ChunkData createVanillaChunkData(World world, int x, int z) {
+        // get empty object
+        CraftChunkData data = (CraftChunkData) createChunkData(world);
+        // do bunch of vanilla shit
+        net.minecraft.server.WorldServer nmsWorld = ((CraftWorld) world).getHandle();
+        net.minecraft.server.ProtoChunk protoChunk = new net.minecraft.server.ProtoChunk(new net.minecraft.server.ChunkCoordIntPair(x, z), net.minecraft.server.ChunkConverter.getEmptyConverter(), nmsWorld);
+        List<net.minecraft.server.IChunkAccess> list = new ArrayList<>();
+        list.add(protoChunk);
+        net.minecraft.server.RegionLimitedWorldAccess genRegion = new net.minecraft.server.RegionLimitedWorldAccess(nmsWorld, list);
+        // call vanilla generator, one feature after another. Order here is important!
+        net.minecraft.server.ChunkGenerator<?> chunkGenerator = ((CraftWorld) world).getHandle().worldProvider.getChunkGenerator();
+        chunkGenerator.createBiomes(protoChunk);
+        chunkGenerator.buildNoise(genRegion, protoChunk);
+        chunkGenerator.buildBase(genRegion, protoChunk);
+        // copy over generated sections
+        data.setRawChunkData(protoChunk.getSections());
+        // hooray!
+        return data;
+    }
+    // Paper end
+
     @Override
     public BossBar createBossBar(String title, BarColor color, BarStyle style, BarFlag... flags) {
         return new CraftBossBar(title, color, style, flags);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
@@ -0,0 +0,0 @@ import org.bukkit.material.MaterialData;
  */
 public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private final int maxHeight;
-    private final ChunkSection[] sections;
+    private ChunkSection[] sections; // Paper - remove final
     private Set<BlockPosition> tiles;
     private World world; // Paper - Anti-Xray - Add world
 
@@ -0,0 +0,0 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
         return sections;
     }
 
+    // Paper start
+    public void setRawChunkData(ChunkSection[] sections) {
+        this.sections = sections;
+    }
+    // Paper end
+
     Set<BlockPosition> getTiles() {
         return tiles;
     }
