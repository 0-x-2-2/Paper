From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 12 Sep 2018 21:47:01 -0400
Subject: [PATCH] Optimize Biome Mob Lookups for Mob Spawning

Uses an EnumMap as well as a Set paired List for O(1) contains calls.

diff --git a/src/main/java/net/minecraft/server/BiomeBase.java b/src/main/java/net/minecraft/server/BiomeBase.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/server/BiomeBase.java
+++ b/src/main/java/net/minecraft/server/BiomeBase.java
@@ -0,0 +0,0 @@ public class BiomeBase {
                 this.r.put(worldgenstage_decoration, Lists.newArrayList());
             }
 
-            this.v = Maps.newHashMap();
+            this.v = Maps.newEnumMap(EnumCreatureType.class); // Paper
             EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
 
             i = aenumcreaturetype.length;
@@ -0,0 +0,0 @@ public class BiomeBase {
             for (j = 0; j < i; ++j) {
                 EnumCreatureType enumcreaturetype = aenumcreaturetype[j];
 
-                this.v.put(enumcreaturetype, Lists.newArrayList());
+                this.v.put(enumcreaturetype, new MobList()); // Paper
             }
 
         } else {
@@ -0,0 +0,0 @@ public class BiomeBase {
         this.u = (Map) list.stream().collect(Collectors.toMap((structurefeature) -> {
             return structurefeature.b;
         }, Function.identity()));
-        this.v = map2;
+        this.v = Maps.newEnumMap(EnumCreatureType.class); this.v.putAll(map2); // Paper
         this.x = list1;
         this.l = (String) optional.orElse(null); // Paper - decompile fix
         Stream stream = map1.values().stream().flatMap(Collection::stream).filter((worldgenfeatureconfigured) -> {
@@ -0,0 +0,0 @@ public class BiomeBase {
         return this.l;
     }
 
+    // Paper start - keep track of data in a pair set to give O(1) contains calls - we have to hook removals incase plugins mess with it
+    public static class MobList extends java.util.ArrayList<BiomeMeta> {
+        java.util.Set<BiomeMeta> biomes = new java.util.HashSet<>();
+
+        @Override
+        public boolean contains(Object o) {
+            return biomes.contains(o);
+        }
+
+        @Override
+        public boolean add(BiomeMeta biomeMeta) {
+            biomes.add(biomeMeta);
+            return super.add(biomeMeta);
+        }
+
+        @Override
+        public BiomeMeta remove(int index) {
+            BiomeMeta removed = super.remove(index);
+            if (removed != null) {
+                biomes.remove(removed);
+            }
+            return removed;
+        }
+
+        @Override
+        public void clear() {
+            biomes.clear();
+            super.clear();
+        }
+    }
+    // Paper end
+
     public static class d {
 
         public static final Codec<BiomeBase.d> a = RecordCodecBuilder.create((instance) -> {
