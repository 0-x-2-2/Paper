From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: BillyGalbreath <Blake.Galbreath@GMail.com>
Date: Fri, 24 Aug 2018 08:18:27 -0500
Subject: [PATCH] Slime Pathfinder Events


diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
@@ -0,0 +0,0 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.Slime;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when a Slime decides to change its facing direction.
+ * <p>
+ * This event does not fire for the entity's actual movement. Only when it
+ * is choosing to change direction.
+ */
+public class SlimeChangeDirectionEvent extends SlimePathfindEvent {
+
+    private float yaw;
+
+    @ApiStatus.Internal
+    public SlimeChangeDirectionEvent(@NotNull Slime slime, float yaw) {
+        super(slime);
+        this.yaw = yaw;
+    }
+
+    /**
+     * Get the new chosen yaw
+     *
+     * @return Chosen yaw
+     */
+    public float getNewYaw() {
+        return this.yaw;
+    }
+
+    /**
+     * Set the new chosen yaw
+     *
+     * @param yaw Chosen yaw
+     */
+    public void setNewYaw(float yaw) {
+        this.yaw = yaw;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
@@ -0,0 +0,0 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.Slime;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.entity.EntityEvent;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when a Slime decides to start pathfinding.
+ * <p>
+ * This event does not fire for the entity's actual movement. Only when it
+ * is choosing to start moving.
+ */
+public class SlimePathfindEvent extends EntityEvent implements Cancellable {
+
+    private static final HandlerList HANDLER_LIST = new HandlerList();
+
+    private boolean cancelled;
+
+    @ApiStatus.Internal
+    public SlimePathfindEvent(@NotNull Slime slime) {
+        super(slime);
+    }
+
+    /**
+     * The Slime that is pathfinding.
+     *
+     * @return The Slime that is pathfinding.
+     */
+    @NotNull
+    public Slime getEntity() {
+        return (Slime) super.getEntity();
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return this.cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
@@ -0,0 +0,0 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.Slime;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when a Slime decides to start jumping while swimming in water/lava.
+ * <p>
+ * This event does not fire for the entity's actual movement. Only when it
+ * is choosing to start jumping.
+ */
+public class SlimeSwimEvent extends SlimeWanderEvent {
+
+    @ApiStatus.Internal
+    public SlimeSwimEvent(@NotNull Slime slime) {
+        super(slime);
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
@@ -0,0 +0,0 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Slime;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when a Slime decides to change direction to target a LivingEntity.
+ * <p>
+ * This event does not fire for the entity's actual movement. Only when it
+ * is choosing to start moving.
+ */
+public class SlimeTargetLivingEntityEvent extends SlimePathfindEvent {
+
+    @NotNull private final LivingEntity target;
+
+    @ApiStatus.Internal
+    public SlimeTargetLivingEntityEvent(@NotNull Slime slime, @NotNull LivingEntity target) {
+        super(slime);
+        this.target = target;
+    }
+
+    /**
+     * Get the targeted entity
+     *
+     * @return Targeted entity
+     */
+    @NotNull
+    public LivingEntity getTarget() {
+        return this.target;
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
@@ -0,0 +0,0 @@
+package com.destroystokyo.paper.event.entity;
+
+import org.bukkit.entity.Slime;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Fired when a Slime decides to start wandering.
+ * <p>
+ * This event does not fire for the entity's actual movement. Only when it
+ * is choosing to start moving.
+ */
+public class SlimeWanderEvent extends SlimePathfindEvent {
+
+    @ApiStatus.Internal
+    public SlimeWanderEvent(@NotNull Slime slime) {
+        super(slime);
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Slime.java b/src/main/java/org/bukkit/entity/Slime.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/entity/Slime.java
+++ b/src/main/java/org/bukkit/entity/Slime.java
@@ -0,0 +0,0 @@ public interface Slime extends Mob, Enemy {
      * @param sz The new size of the slime.
      */
     public void setSize(int sz);
+
+    // Paper start
+    /**
+     * Get whether this slime can randomly wander/jump around on its own
+     *
+     * @return true if can wander
+     */
+    public boolean canWander();
+
+    /**
+     * Set whether this slime can randomly wander/jump around on its own
+     *
+     * @param canWander true if can wander
+     */
+    public void setWander(boolean canWander);
+    // Paper end
 }
