From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Nassim Jahnke <nassim@njahnke.dev>
Date: Sun, 19 Dec 2021 21:11:20 +0100
Subject: [PATCH] Fix tripwire state inconsistency

This patch prevents updating and re-setting the tripwire when being removed in certain conditions

diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -0,0 +0,0 @@ public class TripWireBlock extends Block {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true));
+            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true), true); // Paper - fix state inconsistency
         }
     }
 
@@ -0,0 +0,0 @@ public class TripWireBlock extends Block {
     }
 
     private void updateSource(Level world, BlockPos pos, BlockState state) {
+        // Paper start - fix state inconsistency
+        this.updateSource(world, pos, state, false);
+    }
+
+    private void updateSource(Level world, BlockPos pos, BlockState state, boolean beingRemoved) {
+        // Paper end
         Direction[] aenumdirection = new Direction[]{Direction.SOUTH, Direction.WEST};
         int i = aenumdirection.length;
         int j = 0;
@@ -0,0 +0,0 @@ public class TripWireBlock extends Block {
 
                     if (iblockdata1.is(this.hook)) {
                         if (iblockdata1.getValue(TripWireHookBlock.FACING) == enumdirection.getOpposite()) {
-                            TripWireHookBlock.calculateState(world, blockposition1, iblockdata1, false, true, k, state);
+                            TripWireHookBlock.calculateState(world, blockposition1, iblockdata1, false, true, k, state, beingRemoved); // Paper - fix state inconsistency
                         }
                     } else if (iblockdata1.is((Block) this)) {
                         ++k;
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -0,0 +0,0 @@ public class TripWireHookBlock extends Block {
         TripWireHookBlock.calculateState(world, pos, state, false, false, -1, (BlockState) null);
     }
 
-    public static void calculateState(Level world, BlockPos pos, BlockState state, boolean flag, boolean flag1, int i, @Nullable BlockState iblockdata1) {
+    public static void calculateState(Level world, BlockPos pos, BlockState state, boolean beingRemoved, boolean flag1, int i, @Nullable BlockState iblockdata1) {
+        // Paper start - fix tripwire inconsistency
+        calculateState(world, pos, state, beingRemoved, flag1, i, iblockdata1, false);
+    }
+
+    public static void calculateState(Level world, BlockPos pos, BlockState state, boolean beingRemoved, boolean flag1, int i, @Nullable BlockState iblockdata1, boolean tripWireBeingRemoved) {
+        // Paper end
         Optional<Direction> optional = state.getOptionalValue(TripWireHookBlock.FACING);
 
         if (optional.isPresent()) {
@@ -0,0 +0,0 @@ public class TripWireHookBlock extends Block {
             boolean flag2 = (Boolean) state.getOptionalValue(TripWireHookBlock.ATTACHED).orElse(false);
             boolean flag3 = (Boolean) state.getOptionalValue(TripWireHookBlock.POWERED).orElse(false);
             Block block = state.getBlock();
-            boolean flag4 = !flag;
+            boolean flag4 = !beingRemoved; // Paper
             boolean flag5 = false;
             int j = 0;
             BlockState[] aiblockdata = new BlockState[42];
@@ -0,0 +0,0 @@ public class TripWireHookBlock extends Block {
                     boolean flag7 = (Boolean) iblockdata2.getValue(TripWireBlock.POWERED);
 
                     flag5 |= flag6 && flag7;
+                    if (k != i || !tripWireBeingRemoved || !flag6) // Paper - don't update the tripwire again if being removed and not disarmed
                     aiblockdata[k] = iblockdata2;
                     if (k == i) {
                         world.scheduleTick(pos, block, 10);
@@ -0,0 +0,0 @@ public class TripWireHookBlock extends Block {
             // CraftBukkit end
 
             TripWireHookBlock.emitState(world, pos, flag4, flag5, flag2, flag3);
-            if (!flag) {
+            if (!beingRemoved) { // Paper
                 if (world.getBlockState(pos).getBlock() == Blocks.TRIPWIRE_HOOK) // Paper - validate
                 world.setBlock(pos, (BlockState) iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection), 3);
                 if (flag1) {
