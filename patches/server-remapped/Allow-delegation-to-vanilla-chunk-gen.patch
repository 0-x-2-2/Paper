From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MiniDigger | Martin <admin@minidigger.dev>
Date: Wed, 29 Apr 2020 02:10:32 +0200
Subject: [PATCH] Allow delegation to vanilla chunk gen


diff --git a/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java b/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
+++ b/src/main/java/net/minecraft/world/level/chunk/UpgradeData.java
@@ -0,0 +0,0 @@ import org.apache.logging.log4j.Logger;
 public class UpgradeData {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final UpgradeData EMPTY = new UpgradeData();
+    public static final UpgradeData EMPTY = new UpgradeData(); public static UpgradeData getEmptyConverter() { return EMPTY; } // Paper - obfhelper
     private static final Direction8[] DIRECTIONS = Direction8.values();
     private final EnumSet<Direction8> sides;
     private final int[][] index;
@@ -0,0 +0,0 @@ public class UpgradeData {
                         if ((Integer) iblockdata.getValue(BlockStateProperties.DISTANCE) >= j) {
                             world.setBlock(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.DISTANCE, j), 18);
                             if (i != 7) {
-                                Direction[] aenumdirection = null.f;
+                                Direction[] aenumdirection = DIRECTIONS; // Paper - decomp fix
                                 int k = aenumdirection.length;
 
                                 for (int l = 0; l < k; ++l) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -0,0 +0,0 @@ public final class CraftServer implements Server {
         return new CraftChunkData(world);
     }
 
+    // Paper start
+    @Override
+    public ChunkGenerator.ChunkData createVanillaChunkData(World world, int x, int z) {
+        // get empty object
+        CraftChunkData data = (CraftChunkData) createChunkData(world);
+        // do bunch of vanilla shit
+        net.minecraft.server.level.ServerLevel nmsWorld = ((CraftWorld) world).getHandle();
+        net.minecraft.world.level.chunk.ProtoChunk protoChunk = new net.minecraft.world.level.chunk.ProtoChunk(new net.minecraft.world.level.ChunkPos(x, z), net.minecraft.world.level.chunk.UpgradeData.getEmptyConverter(), nmsWorld);
+        List<net.minecraft.world.level.chunk.ChunkAccess> list = new ArrayList<>();
+        list.add(protoChunk);
+        net.minecraft.server.level.WorldGenRegion genRegion = new net.minecraft.server.level.WorldGenRegion(nmsWorld, list);
+        // call vanilla generator, one feature after another. Order here is important!
+        net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator = nmsWorld.getChunkSource().generator;
+        if (chunkGenerator instanceof org.bukkit.craftbukkit.generator.CustomChunkGenerator) {
+            chunkGenerator = ((org.bukkit.craftbukkit.generator.CustomChunkGenerator) chunkGenerator).delegate;
+        }
+        chunkGenerator.createBiomes(nmsWorld.registryAccess().registryOrThrow(Registry.BIOME_REGISTRY), protoChunk);
+        chunkGenerator.fillFromNoise(genRegion, nmsWorld.structureFeatureManager(), protoChunk);
+        chunkGenerator.buildSurfaceAndBedrock(genRegion, protoChunk);
+        // copy over generated sections
+        data.setRawChunkData(protoChunk.getSections());
+        // hooray!
+        return data;
+    }
+    // Paper end
+
     @Override
     public BossBar createBossBar(String title, BarColor color, BarStyle style, BarFlag... flags) {
         return new CraftBossBar(title, color, style, flags);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
@@ -0,0 +0,0 @@ import org.bukkit.material.MaterialData;
  */
 public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private final int maxHeight;
-    private final LevelChunkSection[] sections;
+    private LevelChunkSection[] sections; // Paper - remove final
     private Set<BlockPos> tiles;
     private World world; // Paper - Anti-Xray - Add world
 
@@ -0,0 +0,0 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
         return sections;
     }
 
+    // Paper start
+    public void setRawChunkData(LevelChunkSection[] sections) {
+        this.sections = sections;
+    }
+    // Paper end
+
     Set<BlockPos> getTiles() {
         return tiles;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -0,0 +0,0 @@ import org.bukkit.generator.ChunkGenerator.ChunkData;
 
 public class CustomChunkGenerator extends InternalChunkGenerator {
 
-    private final net.minecraft.world.level.chunk.ChunkGenerator delegate;
+    public final net.minecraft.world.level.chunk.ChunkGenerator delegate; // Paper - public
     private final ChunkGenerator generator;
     private final ServerLevel world;
     private final Random random = new Random();
