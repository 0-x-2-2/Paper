From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Connor Linfoot <connorlinfoot@me.com>
Date: Sun, 16 May 2021 15:07:34 +0100
Subject: [PATCH] Add basic Datapack API


diff --git a/src/main/java/io/papermc/paper/datapack/PaperDatapack.java b/src/main/java/io/papermc/paper/datapack/PaperDatapack.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datapack/PaperDatapack.java
@@ -0,0 +0,0 @@
+package io.papermc.paper.datapack;
+
+import Compatibility;
+import io.papermc.paper.event.server.ServerResourcesReloadedEvent;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.packs.repository.Pack;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class PaperDatapack implements Datapack {
+    private final String name;
+    private final Compatibility compatibility;
+    private final boolean enabled;
+
+    PaperDatapack(Pack loader, boolean enabled) {
+        this.name = loader.getName();
+        this.compatibility = Compatibility.valueOf(loader.getVersion().name());
+        this.enabled = enabled;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public Compatibility getCompatibility() {
+        return compatibility;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        if (enabled == this.enabled) {
+            return;
+        }
+
+        MinecraftServer server = MinecraftServer.getServer();
+        List<String> enabledKeys = server.getPackRepository().getEnabledPacks().stream().map(Pack::getName).collect(Collectors.toList());
+        if (enabled) {
+            enabledKeys.add(this.name);
+        } else {
+            enabledKeys.remove(this.name);
+        }
+        server.reloadServerResources(enabledKeys, ServerResourcesReloadedEvent.Cause.PLUGIN);
+    }
+}
diff --git a/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java b/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000
--- /dev/null
+++ b/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java
@@ -0,0 +0,0 @@
+package io.papermc.paper.datapack;
+
+import java.util.Collection;
+import java.util.stream.Collectors;
+import net.minecraft.server.packs.repository.Pack;
+import net.minecraft.server.packs.repository.PackRepository;
+
+public class PaperDatapackManager implements DatapackManager {
+    private final PackRepository repository;
+
+    public PaperDatapackManager(PackRepository repository) {
+        this.repository = repository;
+    }
+
+    @Override
+    public Collection<Datapack> getPacks() {
+        Collection<Pack> enabledPacks = repository.getEnabledPacks();
+        return repository.getPacks().stream().map(loader -> new PaperDatapack(loader, enabledPacks.contains(loader))).collect(Collectors.toList());
+    }
+
+    @Override
+    public Collection<Datapack> getEnabledPacks() {
+        return repository.getEnabledPacks().stream().map(loader -> new PaperDatapack(loader, true)).collect(Collectors.toList());
+    }
+}
diff --git a/src/main/java/net/minecraft/server/packs/repository/Pack.java b/src/main/java/net/minecraft/server/packs/repository/Pack.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/server/packs/repository/Pack.java
+++ b/src/main/java/net/minecraft/server/packs/repository/Pack.java
@@ -0,0 +0,0 @@ public class Pack implements AutoCloseable {
         });
     }
 
+    public final PackCompatibility getVersion() { return this.getCompatibility(); } // Paper - OBFHELPER
     public PackCompatibility getCompatibility() {
         return this.compatibility;
     }
@@ -0,0 +0,0 @@ public class Pack implements AutoCloseable {
         return (PackResources) this.supplier.get();
     }
 
+    public final String getName() { return this.getId(); } // Paper - OBFHELPER
     public String getId() {
         return this.id;
     }
diff --git a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
+++ b/src/main/java/net/minecraft/server/packs/repository/PackRepository.java
@@ -0,0 +0,0 @@ public class PackRepository implements AutoCloseable {
         return this.available.keySet();
     }
 
+    public final Collection<Pack> getPacks() { return this.getAvailablePacks(); } // Paper - OBFHELPER
     public Collection<Pack> getAvailablePacks() {
         return this.available.values();
     }
@@ -0,0 +0,0 @@ public class PackRepository implements AutoCloseable {
         return (Collection) this.selected.stream().map(Pack::getId).collect(ImmutableSet.toImmutableSet());
     }
 
+    public final Collection<Pack> getEnabledPacks() { return this.getSelectedPacks(); } // Paper - OBFHELPER
     public Collection<Pack> getSelectedPacks() {
         return this.selected;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -0,0 +0,0 @@ import com.mojang.serialization.Lifecycle;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
+import io.papermc.paper.datapack.PaperDatapackManager; // Paper
 import io.papermc.paper.util.TraceUtil;
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import java.awt.image.BufferedImage;
@@ -0,0 +0,0 @@ public final class CraftServer implements Server {
     public boolean ignoreVanillaPermissions = false;
     private final List<CraftPlayer> playerView;
     public int reloadCount;
+    private final PaperDatapackManager datapackManager; // Paper
     public static Exception excessiveVelEx; // Paper - Velocity warnings
 
     static {
@@ -0,0 +0,0 @@ public final class CraftServer implements Server {
         TicketType.PLUGIN.timeout = Math.min(20, configuration.getInt("chunk-gc.period-in-ticks")); // Paper - cap plugin loads to 1 second
         minimumAPI = configuration.getString("settings.minimum-api");
         loadIcon();
+        datapackManager = new PaperDatapackManager(console.getPackRepository()); // Paper
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -0,0 +0,0 @@ public final class CraftServer implements Server {
     public com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
         return mobGoals;
     }
+
+    @Override
+    public PaperDatapackManager getDatapackManager() {
+        return datapackManager;
+    }
+
     // Paper end
 }
