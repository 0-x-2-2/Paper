From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Josh Roy <10731363+JRoy@users.noreply.github.com>
Date: Wed, 1 Jul 2020 18:01:49 -0400
Subject: [PATCH] Remove streams from classes related villager gossip


diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -0,0 +0,0 @@ import com.mojang.serialization.DynamicOps;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList; // Paper
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import java.util.Arrays;
 import java.util.Collection;
@@ -0,0 +0,0 @@ public class GossipContainer {
         });
     }
 
+    // Paper start - Remove streams from reputation
+    private List<GossipContainer.GossipEntry> decompress() {
+        List<GossipContainer.GossipEntry> list = new ObjectArrayList<>();
+        for (Map.Entry<UUID, GossipContainer.EntityGossips> entry : getReputations().entrySet()) {
+            for (GossipContainer.GossipEntry cur : entry.getValue().decompress(entry.getKey())) {
+                if (cur.weightedValue() != 0)
+                    list.add(cur);
+            }
+        }
+        return list;
+    }
+    // Paper end
+
     private Collection<GossipContainer.GossipEntry> selectGossipsForTransfer(Random random, int count) {
-        List<GossipContainer.GossipEntry> list = (List) this.unpack().collect(Collectors.toList());
+        List<GossipContainer.GossipEntry> list = decompress(); // Paper - Remove streams from reputation
 
         if (list.isEmpty()) {
             return Collections.emptyList();
@@ -0,0 +0,0 @@ public class GossipContainer {
     }
 
     public <T> Dynamic<T> store(DynamicOps<T> dynamicops) {
-        return new Dynamic(dynamicops, dynamicops.createList(this.unpack().map((reputation_b) -> {
+        return new Dynamic(dynamicops, dynamicops.createList(this.decompress().stream().map((reputation_b) -> {
             return reputation_b.store(dynamicops);
         }).map(Dynamic::getValue)));
     }
@@ -0,0 +0,0 @@ public class GossipContainer {
 
     public static class EntityGossips { // Paper - make public
 
-        private final Object2IntMap<GossipType> entries;
+        private final Object2IntMap<GossipType> entries; private Object2IntMap<GossipType> getEntries() { return entries; } // Paper - OBFHELPER
 
         public EntityGossips() { // Paper - make public - update CraftVillager setReputation on change
             this.entries = new Object2IntOpenHashMap();
         }
 
         public int weightedValue(Predicate<GossipType> gossipTypeFilter) {
-            return this.entries.object2IntEntrySet().stream().filter((entry) -> {
-                return gossipTypeFilter.test(entry.getKey());
-            }).mapToInt((entry) -> {
-                return entry.getIntValue() * ((GossipType) entry.getKey()).weight;
-            }).sum();
+            // Paper start - Remove streams from reputation
+            int weight = 0;
+            for (Object2IntMap.Entry<GossipType> entry : getEntries().object2IntEntrySet()) {
+                if (gossipTypeFilter.test(entry.getKey())) {
+                    weight += entry.getIntValue() * entry.getKey().getWeight();
+                }
+            }
+            return weight;
+        }
+
+        public List<GossipContainer.GossipEntry> decompress(UUID uuid) {
+            List<GossipContainer.GossipEntry> list = new ObjectArrayList<>();
+            for (Object2IntMap.Entry<GossipType> entry : getEntries().object2IntEntrySet()) {
+                list.add(new GossipContainer.GossipEntry(uuid, entry.getKey(), entry.getIntValue()));
+            }
+            return list;
+            // Paper - end
         }
 
         public Stream<GossipContainer.GossipEntry> unpack(UUID target) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipType.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipType.java
index 0000000000000000000000000000000000000000..0000000000000000000000000000000000000000 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipType.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipType.java
@@ -0,0 +0,0 @@ public enum GossipType {
     MAJOR_NEGATIVE("major_negative", -5, 100, 10, 10), MINOR_NEGATIVE("minor_negative", -1, 200, 20, 20), MINOR_POSITIVE("minor_positive", 1, 200, 1, 5), MAJOR_POSITIVE("major_positive", 5, 100, 0, 100), TRADING("trading", 1, 25, 2, 20);
 
     public final String id;
-    public final int weight;
+    public final int weight; public int getWeight() { return weight; } // Paper - OBFHELPER
     public final int max;
     public final int decayPerDay;
     public final int decayPerTransfer;
