--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -11,6 +11,7 @@
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.world.CompoundContainer;
 import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
@@ -18,7 +19,6 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.item.ItemEntity;
-import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.HopperMenu;
@@ -29,6 +29,18 @@
 import net.minecraft.world.level.block.HopperBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.inventory.HopperInventorySearchEvent;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
 
 public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
 
@@ -40,6 +52,36 @@
     private long tickedGameTime;
     private Direction facing;
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        this.transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        this.transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return this.transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return this.maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        this.maxStack = size;
+    }
+    // CraftBukkit end
+
     public HopperBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.HOPPER, pos, state);
         this.items = NonNullList.withSize(5, ItemStack.EMPTY);
@@ -102,9 +144,14 @@
         blockEntity.tickedGameTime = world.getGameTime();
         if (!blockEntity.isOnCooldown()) {
             blockEntity.setCooldown(0);
-            HopperBlockEntity.tryMoveItems(world, pos, state, blockEntity, () -> {
+            // Spigot start
+            boolean result = HopperBlockEntity.tryMoveItems(world, pos, state, blockEntity, () -> {
                 return HopperBlockEntity.suckInItems(world, blockEntity);
             });
+            if (!result && blockEntity.level.spigotConfig.hopperCheck > 1) {
+                blockEntity.setCooldown(blockEntity.level.spigotConfig.hopperCheck);
+            }
+            // Spigot end
         }
 
     }
@@ -125,7 +172,7 @@
                 }
 
                 if (flag) {
-                    blockEntity.setCooldown(8);
+                    blockEntity.setCooldown(world.spigotConfig.hopperTransfer); // Spigot
                     setChanged(world, pos, state);
                     return true;
                 }
@@ -167,15 +214,41 @@
 
                     if (!itemstack.isEmpty()) {
                         int j = itemstack.getCount();
-                        ItemStack itemstack1 = HopperBlockEntity.addItem(blockEntity, iinventory, blockEntity.removeItem(i, 1), enumdirection);
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        ItemStack original = itemstack.copy();
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(blockEntity.removeItem(i, world.spigotConfig.hopperAmount)); // Spigot
 
+                        Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof CompoundContainer) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
+                        } else if (iinventory.getOwner() != null) {
+                            destinationInventory = iinventory.getOwner().getInventory();
+                        } else {
+                            destinationInventory = new CraftInventory(iinventory);
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(blockEntity.getOwner().getInventory(), oitemstack, destinationInventory, true);
+                        world.getCraftServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            blockEntity.setItem(i, original);
+                            blockEntity.setCooldown(world.spigotConfig.hopperTransfer); // Delay hopper checks // Spigot
+                            return false;
+                        }
+                        int origCount = event.getItem().getAmount(); // Spigot
+                        ItemStack itemstack1 = HopperBlockEntity.addItem(blockEntity, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
+                        // CraftBukkit end
+
                         if (itemstack1.isEmpty()) {
                             iinventory.setChanged();
                             return true;
                         }
 
                         itemstack.setCount(j);
-                        if (j == 1) {
+                        // Spigot start
+                        itemstack.shrink(origCount - itemstack1.getCount());
+                        if (j <= world.spigotConfig.hopperAmount) {
+                            // Spigot end
                             blockEntity.setItem(i, itemstack);
                         }
                     }
@@ -249,7 +322,7 @@
             for (int j = 0; j < i; ++j) {
                 int k = aint[j];
 
-                if (HopperBlockEntity.tryTakeInItemFromSlot(hopper, iinventory, k, enumdirection)) {
+                if (HopperBlockEntity.tryTakeInItemFromSlot(hopper, iinventory, k, enumdirection, world)) { // Spigot
                     return true;
                 }
             }
@@ -274,21 +347,52 @@
         }
     }
 
-    private static boolean tryTakeInItemFromSlot(Hopper hopper, Container inventory, int slot, Direction side) {
-        ItemStack itemstack = inventory.getItem(slot);
+    private static boolean tryTakeInItemFromSlot(Hopper ihopper, Container iinventory, int i, Direction enumdirection, Level world) { // Spigot
+        ItemStack itemstack = iinventory.getItem(i);
 
-        if (!itemstack.isEmpty() && HopperBlockEntity.canTakeItemFromContainer(hopper, inventory, itemstack, slot, side)) {
+        if (!itemstack.isEmpty() && HopperBlockEntity.canTakeItemFromContainer(ihopper, iinventory, itemstack, i, enumdirection)) {
             int j = itemstack.getCount();
-            ItemStack itemstack1 = HopperBlockEntity.addItem(inventory, hopper, inventory.removeItem(slot, 1), (Direction) null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            ItemStack original = itemstack.copy();
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.removeItem(i, world.spigotConfig.hopperAmount)); // Spigot
 
+            Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (iinventory instanceof CompoundContainer) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
+            } else if (iinventory.getOwner() != null) {
+                sourceInventory = iinventory.getOwner().getInventory();
+            } else {
+                sourceInventory = new CraftInventory(iinventory);
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack, ihopper.getOwner().getInventory(), false);
+
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                iinventory.setItem(i, original);
+
+                if (ihopper instanceof HopperBlockEntity) {
+                    ((HopperBlockEntity) ihopper).setCooldown(world.spigotConfig.hopperTransfer); // Spigot
+                }
+
+                return false;
+            }
+            int origCount = event.getItem().getAmount(); // Spigot
+            ItemStack itemstack1 = HopperBlockEntity.addItem(iinventory, ihopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+            // CraftBukkit end
+
             if (itemstack1.isEmpty()) {
-                inventory.setChanged();
+                iinventory.setChanged();
                 return true;
             }
 
             itemstack.setCount(j);
-            if (j == 1) {
-                inventory.setItem(slot, itemstack);
+            // Spigot start
+            itemstack.shrink(origCount - itemstack1.getCount());
+            if (j <= world.spigotConfig.hopperAmount) {
+                // Spigot end
+                iinventory.setItem(i, itemstack);
             }
         }
 
@@ -297,13 +401,20 @@
 
     public static boolean addItem(Container inventory, ItemEntity itemEntity) {
         boolean flag = false;
+        // CraftBukkit start
+        InventoryPickupItemEvent event = new InventoryPickupItemEvent(inventory.getOwner().getInventory(), (org.bukkit.entity.Item) itemEntity.getBukkitEntity());
+        itemEntity.level().getCraftServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
         ItemStack itemstack = itemEntity.getItem().copy();
         ItemStack itemstack1 = HopperBlockEntity.addItem((Container) null, inventory, itemstack, (Direction) null);
 
         if (itemstack1.isEmpty()) {
             flag = true;
             itemEntity.setItem(ItemStack.EMPTY);
-            itemEntity.discard();
+            itemEntity.discard(EntityRemoveEvent.Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
         } else {
             itemEntity.setItem(itemstack1);
         }
@@ -383,11 +494,18 @@
             boolean flag1 = to.isEmpty();
 
             if (itemstack1.isEmpty()) {
+                // Spigot start - SPIGOT-6693, InventorySubcontainer#setItem
+                ItemStack leftover = ItemStack.EMPTY; // Paper - Make hoppers respect inventory max stack size
+                if (!stack.isEmpty() && stack.getCount() > to.getMaxStackSize()) {
+                    leftover = stack; // Paper - Make hoppers respect inventory max stack size
+                    stack = stack.split(to.getMaxStackSize());
+                }
+                // Spigot end
                 to.setItem(slot, stack);
-                stack = ItemStack.EMPTY;
+                stack = leftover; // Paper - Make hoppers respect inventory max stack size
                 flag = true;
             } else if (HopperBlockEntity.canMergeItems(itemstack1, stack)) {
-                int j = stack.getMaxStackSize() - itemstack1.getCount();
+                int j = Math.min(stack.getMaxStackSize(), to.getMaxStackSize()) - itemstack1.getCount(); // Paper - Make hoppers respect inventory max stack size
                 int k = Math.min(stack.getCount(), j);
 
                 stack.shrink(k);
@@ -410,7 +528,7 @@
                             }
                         }
 
-                        tileentityhopper.setCooldown(8 - b0);
+                        tileentityhopper.setCooldown(tileentityhopper.level.spigotConfig.hopperTransfer - b0); // Spigot
                     }
                 }
 
@@ -421,14 +539,38 @@
         return stack;
     }
 
+    // CraftBukkit start
     @Nullable
+    private static Container runHopperInventorySearchEvent(Container inventory, CraftBlock hopper, CraftBlock searchLocation, HopperInventorySearchEvent.ContainerType containerType) {
+        HopperInventorySearchEvent event = new HopperInventorySearchEvent((inventory != null) ? new CraftInventory(inventory) : null, containerType, hopper, searchLocation);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        CraftInventory craftInventory = (CraftInventory) event.getInventory();
+        return (craftInventory != null) ? craftInventory.getInventory() : null;
+    }
+    // CraftBukkit end
+
+    @Nullable
     private static Container getAttachedContainer(Level world, BlockPos pos, HopperBlockEntity blockEntity) {
-        return HopperBlockEntity.getContainerAt(world, pos.relative(blockEntity.facing));
+        // CraftBukkit start
+        BlockPos searchPosition = pos.relative(blockEntity.facing);
+        Container inventory = HopperBlockEntity.getContainerAt(world, searchPosition);
+
+        CraftBlock hopper = CraftBlock.at(world, pos);
+        CraftBlock searchBlock = CraftBlock.at(world, searchPosition);
+        return HopperBlockEntity.runHopperInventorySearchEvent(inventory, hopper, searchBlock, HopperInventorySearchEvent.ContainerType.DESTINATION);
+        // CraftBukkit end
     }
 
     @Nullable
     private static Container getSourceContainer(Level world, Hopper hopper, BlockPos pos, BlockState state) {
-        return HopperBlockEntity.getContainerAt(world, pos, state, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+        // CraftBukkit start
+        Container inventory = HopperBlockEntity.getContainerAt(world, pos, state, hopper.getLevelX(), hopper.getLevelY() + 1.0D, hopper.getLevelZ());
+
+        BlockPos blockPosition = BlockPos.containing(hopper.getLevelX(), hopper.getLevelY(), hopper.getLevelZ());
+        CraftBlock hopper1 = CraftBlock.at(world, blockPosition);
+        CraftBlock container = CraftBlock.at(world, blockPosition.above());
+        return HopperBlockEntity.runHopperInventorySearchEvent(inventory, hopper1, container, HopperInventorySearchEvent.ContainerType.SOURCE);
+        // CraftBukkit end
     }
 
     public static List<ItemEntity> getItemsAtAndAbove(Level world, Hopper hopper) {
@@ -455,6 +597,7 @@
 
     @Nullable
     private static Container getBlockContainer(Level world, BlockPos pos, BlockState state) {
+        if ( !world.spigotConfig.hopperCanLoadChunks && !world.hasChunkAt( pos ) ) return null; // Spigot
         Block block = state.getBlock();
 
         if (block instanceof WorldlyContainerHolder) {
@@ -543,7 +686,7 @@
     }
 
     @Override
-    protected AbstractContainerMenu createMenu(int syncId, Inventory playerInventory) {
+    protected AbstractContainerMenu createMenu(int syncId, net.minecraft.world.entity.player.Inventory playerInventory) {
         return new HopperMenu(syncId, playerInventory, this);
     }
 }
