--- a/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -19,13 +19,17 @@
 import net.minecraft.world.level.block.state.BlockState;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.List;
+// CraftBukkit end
+
 public class BannerBlockEntity extends BlockEntity implements Nameable {
 
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final int MAX_PATTERNS = 6;
     private static final String TAG_PATTERNS = "patterns";
     @Nullable
-    private Component name;
+    public Component name; // Paper - public
     public DyeColor baseColor;
     private BannerPatternLayers patterns;
 
@@ -53,7 +57,7 @@
     @Override
     protected void saveAdditional(CompoundTag nbt, HolderLookup.Provider registries) {
         super.saveAdditional(nbt, registries);
-        if (!this.patterns.equals(BannerPatternLayers.EMPTY)) {
+        if (!this.patterns.equals(BannerPatternLayers.EMPTY) || serialisingForNetwork.get()) { // Paper - always send patterns to client
             nbt.put("patterns", (Tag) BannerPatternLayers.CODEC.encodeStart(registries.createSerializationContext(NbtOps.INSTANCE), this.patterns).getOrThrow());
         }
 
@@ -74,7 +78,7 @@
             BannerPatternLayers.CODEC.parse(registries.createSerializationContext(NbtOps.INSTANCE), nbt.get("patterns")).resultOrPartial((s) -> {
                 BannerBlockEntity.LOGGER.error("Failed to parse banner patterns: '{}'", s);
             }).ifPresent((bannerpatternlayers) -> {
-                this.patterns = bannerpatternlayers;
+                this.setPatterns(bannerpatternlayers); // CraftBukkit - apply limits
             });
         }
 
@@ -85,9 +89,18 @@
         return ClientboundBlockEntityDataPacket.create(this);
     }
 
+    // Paper start - always send patterns to client
+    ThreadLocal<Boolean> serialisingForNetwork = ThreadLocal.withInitial(() -> Boolean.FALSE);
     @Override
     public CompoundTag getUpdateTag(HolderLookup.Provider registries) {
+        final Boolean wasSerialisingForNetwork = serialisingForNetwork.get();
+        try {
+            serialisingForNetwork.set(Boolean.TRUE);
         return this.saveWithoutMetadata(registries);
+        } finally {
+            serialisingForNetwork.set(wasSerialisingForNetwork);
+        }
+        // Paper end - always send patterns to client
     }
 
     public BannerPatternLayers getPatterns() {
@@ -108,7 +121,7 @@
     @Override
     protected void applyImplicitComponents(BlockEntity.DataComponentInput components) {
         super.applyImplicitComponents(components);
-        this.patterns = (BannerPatternLayers) components.getOrDefault(DataComponents.BANNER_PATTERNS, BannerPatternLayers.EMPTY);
+        this.setPatterns((BannerPatternLayers) components.getOrDefault(DataComponents.BANNER_PATTERNS, BannerPatternLayers.EMPTY)); // CraftBukkit - apply limits
         this.name = (Component) components.get(DataComponents.CUSTOM_NAME);
     }
 
@@ -124,4 +137,13 @@
         nbt.remove("patterns");
         nbt.remove("CustomName");
     }
+
+    // CraftBukkit start
+    public void setPatterns(BannerPatternLayers bannerpatternlayers) {
+        if (bannerpatternlayers.layers().size() > 20) {
+            bannerpatternlayers = new BannerPatternLayers(List.copyOf(bannerpatternlayers.layers().subList(0, 20)));
+        }
+        this.patterns = bannerpatternlayers;
+    }
+    // CraftBukkit end
 }
