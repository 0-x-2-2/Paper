--- a/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -31,6 +31,14 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockCookEvent;
+import org.bukkit.event.block.CampfireStartEvent;
+import org.bukkit.inventory.CampfireRecipe;
+// CraftBukkit end
+
 public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
     private static final int BURN_COOL_SPEED = 2;
@@ -38,12 +46,14 @@
     private final NonNullList<ItemStack> items;
     public final int[] cookingProgress;
     public final int[] cookingTime;
+    public final boolean[] stopCooking; // Paper - Add more Campfire API
 
     public CampfireBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.CAMPFIRE, pos, state);
         this.items = NonNullList.withSize(4, ItemStack.EMPTY);
         this.cookingProgress = new int[4];
         this.cookingTime = new int[4];
+        this.stopCooking = new boolean[4]; // Paper - Add more Campfire API
     }
 
     public static void cookTick(ServerLevel world, BlockPos pos, BlockState state, CampfireBlockEntity blockEntity, RecipeManager.CachedCheck<SingleRecipeInput, CampfireCookingRecipe> recipeMatchGetter) {
@@ -54,16 +64,42 @@
 
             if (!itemstack.isEmpty()) {
                 flag = true;
+                if (!blockEntity.stopCooking[i]) { // Paper - Add more Campfire API
                 int j = blockEntity.cookingProgress[i]++;
+                } // Paper - Add more Campfire API
 
                 if (blockEntity.cookingProgress[i] >= blockEntity.cookingTime[i]) {
                     SingleRecipeInput singlerecipeinput = new SingleRecipeInput(itemstack);
-                    ItemStack itemstack1 = (ItemStack) recipeMatchGetter.getRecipeFor(singlerecipeinput, world).map((recipeholder) -> {
+                    // Paper start - add recipe to cook events
+                    final Optional<RecipeHolder<CampfireCookingRecipe>> recipeHolderOptional = recipeMatchGetter.getRecipeFor(singlerecipeinput, world);
+                    ItemStack itemstack1 = (ItemStack) recipeHolderOptional.map((recipeholder) -> {
+                    // Paper end - add recipe to cook events
                         return ((CampfireCookingRecipe) recipeholder.value()).assemble(singlerecipeinput, world.registryAccess());
                     }).orElse(itemstack);
 
                     if (itemstack1.isItemEnabled(world.enabledFeatures())) {
-                        Containers.dropItemStack(world, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), itemstack1);
+                        // CraftBukkit start - fire BlockCookEvent
+                        CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+                        org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+                        BlockCookEvent blockCookEvent = new BlockCookEvent(CraftBlock.at(world, pos), source, result, (org.bukkit.inventory.CookingRecipe<?>) recipeHolderOptional.map(RecipeHolder::toBukkitRecipe).orElse(null)); // Paper - Add recipe to cook events
+                        world.getCraftServer().getPluginManager().callEvent(blockCookEvent);
+
+                        if (blockCookEvent.isCancelled()) {
+                            return;
+                        }
+
+                        result = blockCookEvent.getResult();
+                        itemstack1 = CraftItemStack.asNMSCopy(result);
+                        // CraftBukkit end
+                        // Paper start - Fix item locations dropped from campfires
+                        double deviation = 0.05F * RandomSource.GAUSSIAN_SPREAD_FACTOR;
+                        while (!itemstack1.isEmpty()) {
+                            net.minecraft.world.entity.item.ItemEntity droppedItem = new net.minecraft.world.entity.item.ItemEntity(world, pos.getX() + 0.5D, pos.getY() + 0.5D, pos.getZ() + 0.5D, itemstack1.split(world.random.nextInt(21) + 10));
+                            droppedItem.setDeltaMovement(world.random.triangle(0.0D, deviation), world.random.triangle(0.2D, deviation), world.random.triangle(0.0D, deviation));
+                            world.addFreshEntity(droppedItem);
+                        }
+                        // Paper end - Fix item locations dropped from campfires
                         blockEntity.items.set(i, ItemStack.EMPTY);
                         world.sendBlockUpdated(pos, state, state, 3);
                         world.gameEvent((Holder) GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(state));
@@ -143,6 +179,16 @@
             System.arraycopy(aint, 0, this.cookingTime, 0, Math.min(this.cookingTime.length, aint.length));
         }
 
+        // Paper start - Add more Campfire API
+        if (nbt.contains("Paper.StopCooking", org.bukkit.craftbukkit.util.CraftMagicNumbers.NBT.TAG_BYTE_ARRAY)) {
+            byte[] abyte = nbt.getByteArray("Paper.StopCooking");
+            boolean[] cookingState = new boolean[4];
+            for (int index = 0; index < abyte.length; index++) {
+                cookingState[index] = abyte[index] == 1;
+            }
+            System.arraycopy(cookingState, 0, this.stopCooking, 0, Math.min(this.stopCooking.length, abyte.length));
+        }
+        // Paper end - Add more Campfire API
     }
 
     @Override
@@ -151,6 +197,13 @@
         ContainerHelper.saveAllItems(nbt, this.items, true, registries);
         nbt.putIntArray("CookingTimes", this.cookingProgress);
         nbt.putIntArray("CookingTotalTimes", this.cookingTime);
+        // Paper start - Add more Campfire API
+        byte[] cookingState = new byte[4];
+        for (int index = 0; index < cookingState.length; index++) {
+            cookingState[index] = (byte) (this.stopCooking[index] ? 1 : 0);
+        }
+        nbt.putByteArray("Paper.StopCooking", cookingState);
+        // Paper end - Add more Campfire API
     }
 
     @Override
@@ -177,7 +230,11 @@
                     return false;
                 }
 
-                this.cookingTime[i] = ((CampfireCookingRecipe) ((RecipeHolder) optional.get()).value()).cookingTime();
+                // CraftBukkit start
+                CampfireStartEvent event = new CampfireStartEvent(CraftBlock.at(this.level,this.worldPosition), CraftItemStack.asCraftMirror(stack), (CampfireRecipe) optional.get().toBukkitRecipe());
+                this.level.getCraftServer().getPluginManager().callEvent(event);
+                this.cookingTime[i] = event.getTotalCookTime(); // i -> event.getTotalCookTime()
+                // CraftBukkit end
                 this.cookingProgress[i] = 0;
                 this.items.set(i, stack.consumeAndReturn(1, entity));
                 world.gameEvent((Holder) GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
