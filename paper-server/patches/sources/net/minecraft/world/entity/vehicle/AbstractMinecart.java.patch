--- a/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -42,6 +42,13 @@
 import net.minecraft.world.level.block.state.properties.RailShape;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
+// CraftBukkit end
 
 public abstract class AbstractMinecart extends VehicleEntity {
 
@@ -76,6 +83,17 @@
         enummap.put(RailShape.NORTH_EAST, Pair.of(baseblockposition2, baseblockposition1));
     });
 
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = 0.95;
+    private double flyingY = 0.95;
+    private double flyingZ = 0.95;
+    public Double maxSpeed;
+    // CraftBukkit end
+
     protected AbstractMinecart(EntityType<?> type, Level world) {
         super(type, world);
         this.blocksBuilding = true;
@@ -101,7 +119,7 @@
 
     @Nullable
     public static <T extends AbstractMinecart> T createMinecart(Level world, double x, double y, double z, EntityType<T> type, EntitySpawnReason reason, ItemStack stack, @Nullable Player player) {
-        T t0 = (AbstractMinecart) type.create(world, reason);
+        T t0 = (T) type.create(world, reason); // CraftBukkit - decompile error
 
         if (t0 != null) {
             t0.setInitialPos(x, y, z);
@@ -143,7 +161,7 @@
     }
 
     @Override
-    public boolean isPushable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Paper - Climbing should not bypass cramming gamerule
         return true;
     }
 
@@ -262,6 +280,14 @@
 
     @Override
     public void tick() {
+        // CraftBukkit start
+        double prevX = this.getX();
+        double prevY = this.getY();
+        double prevZ = this.getZ();
+        float prevYaw = this.getYRot();
+        float prevPitch = this.getXRot();
+        // CraftBukkit end
+
         if (this.getHurtTime() > 0) {
             this.setHurtTime(this.getHurtTime() - 1);
         }
@@ -271,8 +297,20 @@
         }
 
         this.checkBelowWorld();
-        this.handlePortal();
+        // this.handlePortal(); // CraftBukkit - handled in postTick
         this.behavior.tick();
+        // CraftBukkit start
+        org.bukkit.World bworld = this.level().getWorld();
+        Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+        Location to = CraftLocation.toBukkit(this.position(), bworld, this.getYRot(), this.getXRot());
+        Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+        this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+        if (!from.equals(to)) {
+            this.level().getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+        }
+        // CraftBukkit end
         this.updateInWaterStateAndDoFluidPushing();
         if (this.isInLava()) {
             this.lavaHurt();
@@ -385,12 +423,16 @@
 
         this.setDeltaMovement(Mth.clamp(vec3d.x, -d0, d0), vec3d.y, Mth.clamp(vec3d.z, -d0, d0));
         if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.5D));
+            // CraftBukkit start - replace magic numbers with our variables
+            this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.derailedX, this.getDeltaMovement().y * this.derailedY, this.getDeltaMovement().z * this.derailedZ));
+            // CraftBukkit end
         }
 
         this.move(MoverType.SELF, this.getDeltaMovement());
         if (!this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.95D));
+            // CraftBukkit start - replace magic numbers with our variables
+            this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.flyingX, this.getDeltaMovement().y * this.flyingY, this.getDeltaMovement().z * this.flyingZ));
+            // CraftBukkit end
         }
 
     }
@@ -521,6 +563,14 @@
         if (!this.level().isClientSide) {
             if (!entity.noPhysics && !this.noPhysics) {
                 if (!this.hasPassenger(entity)) {
+                    // CraftBukkit start
+                    VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entity.getBukkitEntity());
+                    this.level().getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                    if (collisionEvent.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     double d0 = entity.getX() - this.getX();
                     double d1 = entity.getZ() - this.getZ();
                     double d2 = d0 * d0 + d1 * d1;
@@ -645,4 +695,27 @@
     public boolean isFurnace() {
         return false;
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod() {
+        return new Vector(this.flyingX, this.flyingY, this.flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying) {
+        this.flyingX = flying.getX();
+        this.flyingY = flying.getY();
+        this.flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod() {
+        return new Vector(this.derailedX, this.derailedY, this.derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed) {
+        this.derailedX = derailed.getX();
+        this.derailedY = derailed.getY();
+        this.derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
+    public net.minecraft.world.item.Item publicGetDropItem() { return getDropItem(); } // Paper - api to get boat and minecart material - expose public drop item
 }
