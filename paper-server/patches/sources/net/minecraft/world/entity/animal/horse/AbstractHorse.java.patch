--- a/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -79,6 +79,17 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.ContainerSingleItem;
 
+// CraftBukkit start
+import java.util.Arrays;
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
+
 public abstract class AbstractHorse extends Animal implements ContainerListener, HasCustomInventoryScreen, OwnableEntity, PlayerRideableJumping, Saddleable {
 
     public static final int EQUIPMENT_SLOT_OFFSET = 400;
@@ -166,8 +177,54 @@
         @Override
         public boolean stillValid(Player player) {
             return player.getVehicle() == AbstractHorse.this || player.canInteractWithEntity((Entity) AbstractHorse.this, 4.0D);
+        }
+
+        // CraftBukkit start - add fields and methods
+        public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+        private int maxStack = MAX_STACK;
+
+        @Override
+        public List<ItemStack> getContents() {
+            return Arrays.asList(this.getTheItem());
+        }
+
+        @Override
+        public void onOpen(CraftHumanEntity who) {
+            this.transaction.add(who);
+        }
+
+        @Override
+        public void onClose(CraftHumanEntity who) {
+            this.transaction.remove(who);
+        }
+
+        @Override
+        public List<HumanEntity> getViewers() {
+            return this.transaction;
+        }
+
+        @Override
+        public int getMaxStackSize() {
+            return this.maxStack;
+        }
+
+        @Override
+        public void setMaxStackSize(int size) {
+            this.maxStack = size;
+        }
+
+        @Override
+        public InventoryHolder getOwner() {
+            return (org.bukkit.entity.AbstractHorse) AbstractHorse.this.getBukkitEntity();
+        }
+
+        @Override
+        public Location getLocation() {
+            return AbstractHorse.this.getBukkitEntity().getLocation();
         }
+        // CraftBukkit end
     };
+    public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
     protected AbstractHorse(EntityType<? extends AbstractHorse> type, Level world) {
         super(type, world);
@@ -366,7 +423,7 @@
     public void createInventory() {
         SimpleContainer inventorysubcontainer = this.inventory;
 
-        this.inventory = new SimpleContainer(this.getInventorySize());
+        this.inventory = new SimpleContainer(this.getInventorySize(), (org.bukkit.entity.AbstractHorse) this.getBukkitEntity()); // CraftBukkit
         if (inventorysubcontainer != null) {
             inventorysubcontainer.removeListener(this);
             int i = Math.min(inventorysubcontainer.getContainerSize(), this.inventory.getContainerSize());
@@ -470,7 +527,7 @@
     }
 
     public int getMaxTemper() {
-        return 100;
+        return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
     @Override
@@ -541,7 +598,7 @@
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
-            this.heal(f);
+            this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
             flag = true;
         }
 
@@ -618,7 +675,7 @@
         if (world instanceof ServerLevel worldserver) {
             if (this.isAlive()) {
                 if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
-                    this.heal(1.0F);
+                    this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
                 }
 
                 if (this.canEatGrass()) {
@@ -883,6 +940,7 @@
         if (this.getOwnerUUID() != null) {
             nbt.putUUID("Owner", this.getOwnerUUID());
         }
+        nbt.putInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
         if (!this.inventory.getItem(0).isEmpty()) {
             nbt.put("SaddleItem", this.inventory.getItem(0).save(this.registryAccess()));
@@ -910,6 +968,11 @@
         if (uuid != null) {
             this.setOwnerUUID(uuid);
         }
+        // CraftBukkit start
+        if (nbt.contains("Bukkit.MaxDomestication")) {
+            this.maxDomestication = nbt.getInt("Bukkit.MaxDomestication");
+        }
+        // CraftBukkit end
 
         if (nbt.contains("SaddleItem", 10)) {
             ItemStack itemstack = (ItemStack) ItemStack.parse(this.registryAccess(), nbt.getCompound("SaddleItem")).orElse(ItemStack.EMPTY);
@@ -1012,6 +1075,17 @@
 
     @Override
     public void handleStartJump(int height) {
+        // CraftBukkit start
+        float power;
+        if (height >= 90) {
+            power = 1.0F;
+        } else {
+            power = 0.4F + 0.4F * (float) height / 90.0F;
+        }
+        if (!CraftEventFactory.callHorseJumpEvent(this, power)) {
+            return;
+        }
+        // CraftBukkit end
         this.allowStandSliding = true;
         this.standIfPossible();
         this.playJumpSound();
