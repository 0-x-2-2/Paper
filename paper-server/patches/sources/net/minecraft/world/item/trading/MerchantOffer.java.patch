--- a/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/net/minecraft/world/item/trading/MerchantOffer.java
@@ -8,6 +8,8 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.item.ItemStack;
 
+import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe; // CraftBukkit
+
 public class MerchantOffer {
 
     public static final Codec<MerchantOffer> CODEC = RecordCodecBuilder.create((instance) -> {
@@ -44,7 +46,19 @@
     public int demand;
     public float priceMultiplier;
     public int xp;
+    // CraftBukkit start
+    private CraftMerchantRecipe bukkitHandle;
 
+    public CraftMerchantRecipe asBukkit() {
+        return (this.bukkitHandle == null) ? this.bukkitHandle = new CraftMerchantRecipe(this) : this.bukkitHandle;
+    }
+
+    public MerchantOffer(ItemCost baseCostA, Optional<ItemCost> costB, ItemStack result, int uses, int maxUses, int experience, float priceMultiplier, int demand, CraftMerchantRecipe bukkit) {
+        this(baseCostA, costB, result, uses, maxUses, experience, priceMultiplier, demand);
+        this.bukkitHandle = bukkit;
+    }
+    // CraftBukkit end
+
     private MerchantOffer(ItemCost firstBuyItem, Optional<ItemCost> secondBuyItem, ItemStack sellItem, int uses, int maxUses, boolean rewardingPlayerExperience, int specialPrice, int demandBonus, float priceMultiplier, int merchantExperience) {
         this.baseCostA = firstBuyItem;
         this.costB = secondBuyItem;
@@ -185,7 +199,11 @@
         if (!this.satisfiedBy(firstBuyStack, secondBuyStack)) {
             return false;
         } else {
-            firstBuyStack.shrink(this.getCostA().getCount());
+            // CraftBukkit start
+            if (!this.getCostA().isEmpty()) {
+                firstBuyStack.shrink(this.getCostA().getCount());
+            }
+            // CraftBukkit end
             if (!this.getCostB().isEmpty()) {
                 secondBuyStack.shrink(this.getCostB().getCount());
             }
