--- a/net/minecraft/world/item/crafting/RecipeMap.java
+++ b/net/minecraft/world/item/crafting/RecipeMap.java
@@ -30,8 +_,53 @@
             builder1.put(recipeHolder.id(), recipeHolder);
         }
 
-        return new RecipeMap(builder.build(), builder1.build());
-    }
+        // CraftBukkit start - mutable
+        return new RecipeMap(com.google.common.collect.LinkedHashMultimap.create(builder.build()), com.google.common.collect.Maps.newHashMap(builder1.build()));
+    }
+
+    public void addRecipe(RecipeHolder<?> irecipe) {
+        Collection<RecipeHolder<?>> map = this.byType.get(irecipe.value().getType());
+
+        if (this.byKey.containsKey(irecipe.id())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.id());
+        } else {
+            map.add(irecipe);
+            this.byKey.put(irecipe.id(), irecipe);
+        }
+    }
+
+    // public boolean removeRecipe(ResourceKey<Recipe<?>> mcKey) {
+    //     boolean removed = false;
+    //     Iterator<RecipeHolder<?>> iter = this.byType.values().iterator();
+    //     while (iter.hasNext()) {
+    //         RecipeHolder<?> recipe = iter.next();
+    //         if (recipe.id().equals(mcKey)) {
+    //             iter.remove();
+    //             removed = true;
+    //         }
+    //     }
+    //     removed |= this.byKey.remove(mcKey) != null;
+    //
+    //     return removed;
+    // }
+    // CraftBukkit end
+
+
+    // Paper start - replace removeRecipe implementation
+    public <T extends RecipeInput> boolean removeRecipe(ResourceKey<Recipe<T>> mcKey) {
+        //noinspection unchecked
+        final RecipeHolder<Recipe<T>> remove = (RecipeHolder<Recipe<T>>) this.byKey.remove(mcKey);
+        if (remove == null) {
+            return false;
+        }
+        final Collection<? extends RecipeHolder<? extends Recipe<T>>> recipes = this.byType(remove.value().getType());
+        if (recipes.remove(remove)) {
+            return true;
+        }
+        return false;
+        // Paper end - why are you using a loop???
+    }
+    // Paper end - replace removeRecipe implementation
 
     public <I extends RecipeInput, T extends Recipe<I>> Collection<RecipeHolder<T>> byType(RecipeType<T> type) {
         return (Collection)this.byType.get(type);
