--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -26,11 +26,6 @@
 import net.minecraft.resources.FileToIdConverter;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.packs.resources.ResourceManager;
-import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
-import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
-import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.crafting.display.RecipeDisplay;
@@ -39,6 +34,16 @@
 import net.minecraft.world.level.Level;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import java.util.Collections;
+import net.minecraft.server.MinecraftServer;
+// CraftBukkit end
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.packs.resources.ResourceManager;
+import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
+import net.minecraft.server.packs.resources.SimplePreparableReloadListener;
+import net.minecraft.util.profiling.ProfilerFiller;
+
 public class RecipeManager extends SimplePreparableReloadListener<RecipeMap> implements RecipeAccess {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -111,7 +116,26 @@
         RecipeManager.LOGGER.info("Loaded {} recipes", prepared.values().size());
     }
 
+    // CraftBukkit start
+    public void addRecipe(RecipeHolder<?> irecipe) {
+        org.spigotmc.AsyncCatcher.catchOp("Recipe Add"); // Spigot
+        this.recipes.addRecipe(irecipe);
+        this.finalizeRecipeLoading();
+    }
+
+    private FeatureFlagSet featureflagset;
+
+    public void finalizeRecipeLoading() {
+        if (this.featureflagset != null) {
+            this.finalizeRecipeLoading(this.featureflagset);
+
+            MinecraftServer.getServer().getPlayerList().reloadRecipes();
+        }
+    }
+
     public void finalizeRecipeLoading(FeatureFlagSet features) {
+        this.featureflagset = features;
+        // CraftBukkit end
         List<SelectableRecipe.SingleInputEntry<StonecutterRecipe>> list = new ArrayList();
         List<RecipeManager.IngredientCollector> list1 = RecipeManager.RECIPE_PROPERTY_SETS.entrySet().stream().map((entry) -> {
             return new RecipeManager.IngredientCollector((ResourceKey) entry.getKey(), (RecipeManager.IngredientExtractor) entry.getValue());
@@ -130,7 +154,7 @@
                     StonecutterRecipe recipestonecutting = (StonecutterRecipe) irecipe;
 
                     if (RecipeManager.isIngredientEnabled(features, recipestonecutting.input()) && recipestonecutting.resultDisplay().isEnabled(features)) {
-                        list.add(new SelectableRecipe.SingleInputEntry<>(recipestonecutting.input(), new SelectableRecipe<>(recipestonecutting.resultDisplay(), Optional.of(recipeholder))));
+                        list.add(new SelectableRecipe.SingleInputEntry<StonecutterRecipe>(recipestonecutting.input(), new SelectableRecipe<>(recipestonecutting.resultDisplay(), Optional.of((RecipeHolder<StonecutterRecipe>) recipeholder)))); // CraftBukkit - decompile error
                     }
                 }
 
@@ -172,7 +196,10 @@
     }
 
     public <I extends RecipeInput, T extends Recipe<I>> Optional<RecipeHolder<T>> getRecipeFor(RecipeType<T> type, I input, Level world) {
-        return this.recipes.getRecipesFor(type, input, world).findFirst();
+        // CraftBukkit start
+        List<RecipeHolder<T>> list = this.recipes.getRecipesFor(type, input, world).toList();
+        return (list.isEmpty()) ? Optional.empty() : Optional.of(list.getLast()); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+        // CraftBukkit end
     }
 
     public Optional<RecipeHolder<?>> byKey(ResourceKey<Recipe<?>> key) {
@@ -183,7 +210,7 @@
     private <T extends Recipe<?>> RecipeHolder<T> byKeyTyped(RecipeType<T> type, ResourceKey<Recipe<?>> key) {
         RecipeHolder<?> recipeholder = this.recipes.byKey(key);
 
-        return recipeholder != null && recipeholder.value().getType().equals(type) ? recipeholder : null;
+        return recipeholder != null && recipeholder.value().getType().equals(type) ? (RecipeHolder) recipeholder : null; // CraftBukkit - decompile error
     }
 
     public Map<ResourceKey<RecipePropertySet>, RecipePropertySet> getSynchronizedItemProperties() {
@@ -231,6 +258,22 @@
         return new RecipeHolder<>(key, irecipe);
     }
 
+    // CraftBukkit start
+    public boolean removeRecipe(ResourceKey<Recipe<?>> mcKey) {
+        boolean removed = this.recipes.removeRecipe(mcKey);
+        if (removed) {
+            this.finalizeRecipeLoading();
+        }
+
+        return removed;
+    }
+
+    public void clearRecipes() {
+        this.recipes = RecipeMap.create(Collections.emptyList());
+        this.finalizeRecipeLoading();
+    }
+    // CraftBukkit end
+
     public static <I extends RecipeInput, T extends Recipe<I>> RecipeManager.CachedCheck<I, T> createCheck(final RecipeType<T> type) {
         return new RecipeManager.CachedCheck<I, T>() {
             @Nullable
