--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -38,6 +38,11 @@
 import net.minecraft.world.flag.FeatureFlags;
 import org.slf4j.Logger;
 
+// CraftBukkit start
+import org.bukkit.craftbukkit.CraftServerLinks;
+import org.bukkit.event.player.PlayerLinksSendEvent;
+// CraftBukkit end
+
 public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketListenerImpl implements ServerConfigurationPacketListener, TickablePacketListener {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -50,10 +55,12 @@
     @Nullable
     private SynchronizeRegistriesTask synchronizeRegistriesTask;
 
-    public ServerConfigurationPacketListenerImpl(MinecraftServer server, Connection connection, CommonListenerCookie clientData) {
-        super(server, connection, clientData);
-        this.gameProfile = clientData.gameProfile();
-        this.clientInformation = clientData.clientInformation();
+    // CraftBukkit start
+    public ServerConfigurationPacketListenerImpl(MinecraftServer minecraftserver, Connection networkmanager, CommonListenerCookie commonlistenercookie, ServerPlayer player) {
+        super(minecraftserver, networkmanager, commonlistenercookie, player);
+        // CraftBukkit end
+        this.gameProfile = commonlistenercookie.gameProfile();
+        this.clientInformation = commonlistenercookie.clientInformation();
     }
 
     @Override
@@ -63,6 +70,10 @@
 
     @Override
     public void onDisconnect(DisconnectionDetails info) {
+        // Paper start - Debugging
+        if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) {
+            ServerConfigurationPacketListenerImpl.LOGGER.info("{} lost connection: {}, while in configuration phase {}", this.gameProfile, info.reason().getString(), currentTask != null ? currentTask.type().id() : "null");
+        } else // Paper end
         ServerConfigurationPacketListenerImpl.LOGGER.info("{} lost connection: {}", this.gameProfile, info.reason().getString());
         super.onDisconnect(info);
     }
@@ -75,6 +86,12 @@
     public void startConfiguration() {
         this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
         ServerLinks serverlinks = this.server.serverLinks();
+        // CraftBukkit start
+        CraftServerLinks wrapper = new CraftServerLinks(serverlinks);
+        PlayerLinksSendEvent event = new PlayerLinksSendEvent(this.player.getBukkitEntity(), wrapper);
+        this.player.getBukkitEntity().getServer().getPluginManager().callEvent(event);
+        serverlinks = wrapper.getServerLinks();
+        // CraftBukkit end
 
         if (!serverlinks.isEmpty()) {
             this.send(new ClientboundServerLinksPacket(serverlinks.untrust()));
@@ -107,6 +124,7 @@
     @Override
     public void handleClientInformation(ServerboundClientInformationPacket packet) {
         this.clientInformation = packet.information();
+        this.connection.channel.attr(io.papermc.paper.adventure.PaperAdventure.LOCALE_ATTRIBUTE).set(net.kyori.adventure.translation.Translator.parseLocale(packet.information().language())); // Paper
     }
 
     @Override
@@ -143,18 +161,23 @@
                 return;
             }
 
-            Component ichatbasecomponent = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
+            Component ichatbasecomponent = null; // CraftBukkit - login checks already completed
 
             if (ichatbasecomponent != null) {
                 this.disconnect(ichatbasecomponent);
                 return;
             }
 
-            ServerPlayer entityplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation);
+            ServerPlayer entityplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation, this.player); // CraftBukkit
 
             playerlist.placeNewPlayer(this.connection, entityplayer, this.createCookie(this.clientInformation));
         } catch (Exception exception) {
             ServerConfigurationPacketListenerImpl.LOGGER.error("Couldn't place player in world", exception);
+            // Paper start - Debugging
+            if (MinecraftServer.getServer().isDebugging()) {
+                exception.printStackTrace();
+            }
+            // Paper end - Debugging
             this.connection.send(new ClientboundDisconnectPacket(ServerConfigurationPacketListenerImpl.DISCONNECT_REASON_INVALID_DATA));
             this.connection.disconnect(ServerConfigurationPacketListenerImpl.DISCONNECT_REASON_INVALID_DATA);
         }
